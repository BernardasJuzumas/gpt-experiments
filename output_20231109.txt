Filename: ./agents-threads/refactored/assistant_manager.py
Contents:
from openai import OpenAI
from models import Assistant
from logger import Logger

class AssistantManager:
    def __init__(self, client=None):
        self.client = client or OpenAI()  # Allow dependency injection of the OpenAI client for testing
        self.logger = Logger(__name__)

    def check_if_assistant_exists(self, name):
            """
            Check if an assistant with the given name exists in the OpenAI API.

            Args:
                name (str): The name of the assistant to check.

            Returns:
                Assistant or None: If an assistant with the given name exists, return an Assistant object
                representing the assistant. Otherwise, return None.
            """
            matching_assistants = [
                assistant for assistant in self.client.beta.assistants.list() 
                if assistant.name == name
            ]
            if matching_assistants:
                self.logger.info(f"Assistant found: {name}")
                data = matching_assistants[0]
                return Assistant(
                    id=data.id,
                    name=data.name,
                    model=data.model,  # API response may not include model
                    instructions=data.instructions  # API response may not include instructions
                )
            self.logger.info(f"Assistant NOT found: {name}")
            return None

    def create_assistant(self, name, model, instructions):
        try:
            assistant_data = self.client.beta.assistants.create(name=name, model=model, instructions=instructions)
            self.logger.info(f"Assistant created: {name}")
            return Assistant(
                id=assistant_data.id,
                name=assistant_data.name,
                model=assistant_data.model,  # API response may not include model
                instructions=assistant_data.instructions  # API response may not include instructions
            )
        except Exception as e:
            self.logger.error(f"Error creating assistant: {e}")
            raise

    def get_or_create_assistant(self, name, model, instructions):
        try:
            assistant = self.check_if_assistant_exists(name)
            if assistant is None:
                assistant = self.create_assistant(name, model, instructions)
            self.logger.info(f"Assistant added \nName: {name}; \nmodel: {model}; \ninstructions: {instructions}")
            return assistant
        except Exception as e:
            self.logger.error(f"Error getting or creating assistant: {e}")
            raise---------
Filename: ./agents-threads/refactored/main.py
Contents:
from conversation_manager import ConversationManager

def main():
    """
    Initializes the ConversationManager, runs the conversation process, closes the database connection, and outputs the messages in the conversation.
    """
    # Initialize the ConversationManager
    manager = ConversationManager()

    # Run the conversation process
    messages = manager.run_conversation()

    # Close the database connection
    manager.close()

    # Output the messages in the conversation
    for message in messages:
        print(f"{message.role}: {message.content}")
        print("*********************************************")

if __name__ == "__main__":
    main()---------
Filename: ./agents-threads/refactored/models.py
Contents:
from dataclasses import dataclass
from datetime import datetime

@dataclass
class Message:
    thread_id: str
    role: str
    content: str

@dataclass
class Thread:
    id: str
    created_at: datetime
    messages: list[Message] = None

    def add_message(self, message: Message):
        if self.messages is None:
            self.messages = []
        self.messages.append(message)

@dataclass
class Assistant:
    id: str
    name: str
    model: str
    instructions: str

@dataclass
class Run:
    id: str
    thread_id: str
    assistant_id: str
    status: str---------
Filename: ./agents-threads/refactored/logger.py
Contents:
import logging
from config import DEBUG

class Logger:
    def __init__(self, name, level=logging.INFO, log_file='run.log'):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(level)
        self.formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

        self.log_file = log_file
        self._setup_file_handler()
        if DEBUG:
            self._setup_console_handler()

    def _setup_console_handler(self):
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(self.formatter)
        self.logger.addHandler(console_handler)

    def _setup_file_handler(self):
        file_handler = logging.FileHandler(self.log_file)
        file_handler.setFormatter(self.formatter)
        self.logger.addHandler(file_handler)
    
    def info(self, message):
        self.logger.info(message)
    
    def error(self, message):
        self.logger.error(message)
    
    # Add more logging levels if needed---------
Filename: ./agents-threads/refactored/config.py
Contents:

"""
This module contains configuration settings for the OpenAI API key, database folder, thread message, and seed.
"""

import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configuration Settings
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_FOLDER = ".cache"
THREAD_MESSAGE = "I'm 18 years old and about to finish the school. I'd like to take a gap year and travel around the world. My parents tell me not to waste time and go straight in to college. What do you think about that?"
SEED = 421

DEBUG = True  # While deploying to production, this should be set to False

# Add more configs if needed


---------
Filename: ./agents-threads/refactored/db_manager.py
Contents:
import sqlite3
from pathlib import Path
from config import DATABASE_FOLDER, SEED

class DBManager:
    def __init__(self, seed):
        self.seed = seed
        self.conn = self.initialize_db()

    @staticmethod
    def cache_seed_directory(seed):
        Path(f"{DATABASE_FOLDER}/{seed}").mkdir(parents=True, exist_ok=True)

    def initialize_db(self):
        self.cache_seed_directory(self.seed)
        db_path = f"{DATABASE_FOLDER}/{self.seed}/log.db"
        conn = sqlite3.connect(db_path)
        conn.execute("""CREATE TABLE IF NOT EXISTS log (
                        timestamp text,
                        thread_id text,
                        run_id text,
                        assistant_id text
                    )""")
        return conn

    def execute(self, query, params=None):
        with self.conn as connection:
            cursor = connection.cursor()
            result = cursor.execute(query, params or ())
            return result.fetchall()

    def close(self):
        self.conn.close()
    def get_last_thread_and_run_id(self):
        query = """
            SELECT thread_id, run_id 
            FROM log 
            ORDER BY timestamp DESC 
            LIMIT 1;
        """
        result = self.execute(query)
        return result[0] if result else (None, None)


# Add more database-related functions if needed


---------
Filename: ./agents-threads/refactored/conversation_manager.py
Contents:


"""
This module contains the ConversationManager class, which is responsible for managing conversations between users and assistants.
It uses the OpenAI API to create and manage threads, runs, and messages, and to retrieve and cache assistant information.
The ConversationManager class also logs runs to a database using the DBManager class.
"""
from datetime import datetime
from db_manager import DBManager
import config
from models import Thread, Run, Message
from assistant_manager import AssistantManager
from openai import OpenAI
from time import sleep
from logger import Logger


class ConversationManager:
    """
    A class that manages conversations between users and OpenAI assistants.
    It provides methods to retrieve messages from a thread, create or retrieve a thread, run an assistant, and log runs.
    """
    
    def __init__(self):
        self.db_manager = DBManager(config.SEED)
        self.assistant_manager = AssistantManager() 
        self.client = OpenAI()  # Assume OpenAI object is correctly initialized
        self.logger = Logger(__name__)


    def get_thread_messages(self, thread_id):
            """
            Retrieves all messages in a given thread and returns them as a list of Message objects.

            Args:
                thread_id (str): The ID of the thread to retrieve messages from.

            Returns:
                list: A list of Message objects representing the messages in the thread.
            """
            try:
                messages_data = self.client.beta.threads.messages.list(thread_id=thread_id, order="asc")
                messages = []
                assistant_cache = {}  # Cache assistant information to avoid repeated API calls

                for thread_message in messages_data:
                    assistant_name = "User"
                    assistant_id = thread_message.assistant_id
                    
                    if assistant_id:
                        if assistant_id not in assistant_cache:
                            # Retrieve assistant information just once and cache it
                            assistant = self.client.beta.assistants.retrieve(assistant_id=assistant_id)
                            assistant_cache[assistant_id] = assistant.name
                        
                        assistant_name = assistant_cache[assistant_id]

                    # Construct the Message model
                    content = thread_message.content[0].text.value
                    message = Message(
                        thread_id=thread_id,
                        role=assistant_name,
                        content=content
                    )
                    messages.append(message)
                return messages
            except Exception as e:
                self.logger.info(f"Assistant NOT found: {name}").error(f"Error retrieving messages: {e}")
                raise

    def log_run(self, run: Run):
        try:
            self.db_manager.execute("""
                INSERT INTO log (timestamp, thread_id, run_id, assistant_id)
                VALUES (?, ?, ?, ?)
            """, (datetime.utcnow(), run.thread_id, run.id, run.assistant_id))
        except Exception as e:
            self.logger.info(f"Assistant NOT found: {name}").error(f"Error logging run: {e}")
            raise

    def retrieve_last_run(self, thread_id):
        
        result = self.db_manager.execute("""
            SELECT run_id FROM log WHERE thread_id = ? ORDER BY timestamp DESC LIMIT 1
        """, (thread_id,))
        if result:
            return Run(id=result[0][0], thread_id=thread_id, assistant_id=None, status=None)
        return None
    
    def create_or_retrieve_thread(self, last_thread_id=None):
        if last_thread_id is None:
            thread_data = self.client.beta.threads.create()
            thread = Thread(id=thread_data.id, created_at=datetime.utcnow())
            message = Message(thread_id=thread.id, role="user", content=config.THREAD_MESSAGE)
            self.client.beta.threads.messages.create(thread_id=thread.id, role=message.role, content=message.content)
            return thread
        else:
            thread_data = self.client.beta.threads.retrieve(last_thread_id)
            return Thread(id=thread_data.id, created_at=datetime.fromisoformat(thread_data.created_at))

    # More methods ...

    def close(self):
        self.db_manager.close()


    def run_conversation(self):
        # Retrieve or create the last thread
          # Retrieve or create the last thread
        thread_id, _ = self.db_manager.get_last_thread_and_run_id()
        thread = self.create_or_retrieve_thread(thread_id)

        # Ensure the existence of the two personas using the AssistantManager's new method
        conservative_instructions = (
            "You rigorously, yet politely defend conservative family values and tradition. "
            "To previous messages that challenge your beliefs respond with response and challenge of your own."
        )
        liberal_instructions = (
            "You rigorously, yet politely defend liberal values, freedom of choice and exploring yourself "
            "beyond realms of traditional culture. To previous messages that challenge your beliefs respond "
            "with response and challenge of your own."
        )

        conservative = self.assistant_manager.get_or_create_assistant(
            "Conservative", "gpt-4-1106-preview", conservative_instructions
        )
        liberal = self.assistant_manager.get_or_create_assistant(
            "Liberal", "gpt-4-1106-preview", liberal_instructions
        )
        
        # Run the conversation with both assistants
        conserv_run = self.run_assistant(thread.id, conservative.id)
        liberal_run = self.run_assistant(thread.id, liberal.id)


        messages = self.get_thread_messages(thread.id)
        
        # ... rest of run_conversation logic
        # Instead of returning messages, you could also print them here or handle them as needed.
        return messages
    
    def wait_for_run_completion(self, run: Run):
        """Waits for the run to complete by periodically checking its status."""
        while True:
            current_run = self.client.beta.threads.runs.retrieve(run_id=run.id, thread_id=run.thread_id)
            
            if current_run.status == 'completed':
                return current_run
            elif current_run.status == 'failed':
                raise Exception(f"Run with ID {run.id} has failed.")
            
            self.logger.info(f"Current run status: {current_run.status}. Waiting 5 seconds.")
            sleep(5)  # Wait for 5 seconds before re-checking the status

    def run_assistant(self, thread_id, assistant_id):
        """Starts a new run or continues an existing one with the assistant."""
        # Retrieve the last run and wait for it to complete before starting a new one
        try:
            last_run = self.retrieve_last_run(thread_id)
            if last_run is not None:
                self.wait_for_run_completion(last_run)

            # Start a new run
            new_run_data = self.client.beta.threads.runs.create(thread_id=thread_id, assistant_id=assistant_id)
            new_run = Run(id=new_run_data.id, thread_id=thread_id, assistant_id=assistant_id, status=new_run_data.status)
            
            # Log newly created run
            self.log_run(new_run)
            
            # Wait for the new run to complete
            completed_run = self.wait_for_run_completion(new_run)
            self.logger.info(f"Run {completed_run} with assistant {assistant_id} on a thread {thread_id} completed ")
        except Exception as e:
            self.logger.error(f"Error running assistant: {e}")
            raise

        return completed_run
    def create_or_retrieve_thread(self, last_thread_id=None):
        try:
            if last_thread_id is None:
                thread_data = self.client.beta.threads.create()
                thread = Thread(id=thread_data.id, created_at=datetime.utcnow())
                self.client.beta.threads.messages.create(
                    thread_id=thread.id,
                    role="user",
                    content=config.THREAD_MESSAGE  # Make sure THREAD_MESSAGE is imported from config.py
                )
                self.logger.info(f"Created new thread: {thread.id}")
                return thread
            else:
                thread_data = self.client.beta.threads.retrieve(last_thread_id)
                # We assume the response includes a 'created_at' or similar timestamp field.
                # Use the accurate field name based on the actual API response structure.
                self.logger.info(f"Retrieved existing thread: {thread_data.id}")
                return Thread(
                    id=thread_data.id,
                    created_at=datetime.fromtimestamp(thread_data.created_at),
                    messages=[]  # Assuming threads have an associated list of messages.
                )
        except Exception as e:
            self.logger.error(f"Error creating or retrieving thread: {e}")
            raise


# ... rest of the code---------
